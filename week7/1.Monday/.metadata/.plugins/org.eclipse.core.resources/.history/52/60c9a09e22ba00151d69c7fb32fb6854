import java.io.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.file.Path;

public class FileUtils {

	private FileUtils() {

	}

	private static FileUtils mInstance;

	public static FileUtils getInstance() {
		if (mInstance == null) {
			mInstance = new FileUtils();
		}
		return mInstance;
	}

	static String readFrom(File file) throws IOException {
		StringBuilder input = new StringBuilder();
		BufferedReader inputStream = null;
		try {
			inputStream = new BufferedReader(new FileReader(file));
			String line;
			while ((line = inputStream.readLine()) != null) {
				input.append(line);
				input.append(System.lineSeparator());
			}
		} finally {
			if (inputStream != null) {
				inputStream.close();
			}
		}
		return input.toString();
	}

	static String readFrom(Path path) throws IOException {
		return readFrom(path.toFile());
	}

	static WordCountResult wordCount(File file) throws IOException {
		BufferedReader inputStream = null;
		int words = 0;
		int lines = 0;
		int characters = 0;
		try {
			inputStream = new BufferedReader(new FileReader(file));
			String line;
			while ((line = inputStream.readLine()) != null) {
				lines++;
				line.replaceAll("\\t", "");
				String[] myWords = line.replaceAll("\\s+", " ").split(" ");
				words += myWords.length;

				for (String word : myWords) {
					characters += word.length();
				}
			}
		} finally {
			if (inputStream != null) {
				inputStream.close();
			}
		}
		return new WordCountResult(words, lines, characters);
	}

	static WordCountResult wordCount(Path path) throws IOException {
		return wordCount(path.toFile());
	}

	static void readInput(Path path) throws IOException {
		BufferedReader reader=null;
		BufferedWriter writer=null;
		try {
			reader = new BufferedReader(new FileReader(path.toFile()));
			writer = new BufferedWriter(new FileWriter("text.txt"));
			String value;
			String retValue;
			ByteBuffer convertedBytes = null;
			String convertValue2;
			while ((value = reader.readLine()) != null) {
				CharsetEncoder encoder2 = Charset.forName("Windows-1252").newEncoder();
				CharsetEncoder encoder3 = Charset.forName("UTF-8").newEncoder();

				System.out.println("value = " + value);

				assert encoder2.canEncode(value);
				assert encoder3.canEncode(value);

				ByteBuffer conv1Bytes = encoder2.encode(CharBuffer.wrap(value.toCharArray()));

				retValue = new String(conv1Bytes.array(), Charset.forName("Windows-1252"));

				System.out.println("retValue = " + retValue);

				convertedBytes = encoder3.encode(CharBuffer.wrap(retValue.toCharArray()));
				convertValue2 = new String(convertedBytes.array(), Charset.forName("UTF-8"));
				System.out.println("convertedValue =" + convertValue2);

				writer.write(convertValue2);
				writer.write(System.lineSeparator());
			}
		} finally {
			if(reader!=null){
				reader.close();
			}
			if(writer!=null){
				writer.close();
			}
		}
	}
}
