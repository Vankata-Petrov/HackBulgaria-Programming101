import java.io.File;
import java.io.FilenameFilter;
import java.util.concurrent.ArrayBlockingQueue;

public class TxtFileFinder implements Runnable{
	private static ArrayBlockingQueue<File> textFiles;
	static boolean finished=false;
	public TxtFileFinder(ArrayBlockingQueue<File> textFiles){
		this.textFiles=textFiles;
	}
	void neshto(){FilenameFilter filter = new FilenameFilter() {
	    public boolean accept(File dir, String name) {
	        return name.endsWith(".txt");
	    }
	};

	File folder = new File("/path/to/files");
	File[] listOfFiles = folder.listFiles(filter);

	for (int i = 0; i < listOfFiles.length; i++) {
	    File file = listOfFiles[i];
	   // String content = .readFileToString(file);
	    // do something with the file
	}}
	public static void find(File root){
		findFiles(root);
		finished=true;
	}
	public static void findFiles(File root) {
	    File[] listOfFiles = root.listFiles();
	    for (int i = 0; i < listOfFiles.length; i++) {
	        String iName = listOfFiles[i].getName();
	        if (listOfFiles[i].isFile()) {
	            if (iName.endsWith(".txt") || iName.endsWith(".TXT")) {
	                textFiles.add(listOfFiles[i]);
	            }
	        }
	        else if (listOfFiles[i].isDirectory()) {
	            findFiles(listOfFiles[i]);
	        }
	    }
	}
	@Override
	public void run() {
		File[] listOfFiles = new File(".").listFiles();
	    for (int i = 0; i < listOfFiles.length; i++) {
	        String iName = listOfFiles[i].getName();
	        if (listOfFiles[i].isFile()) {
	            if (iName.endsWith(".txt") || iName.endsWith(".TXT")) {
	                textFiles.add(listOfFiles[i]);
	            }
	        }
	        else if (listOfFiles[i].isDirectory()) {
	            findFiles(listOfFiles[i]);
	        }
	    }
	    finished=true;
		// TODO Auto-generated method stub
		
	}
}
