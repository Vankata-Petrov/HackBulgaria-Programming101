
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;

public class ProducerConsumer {
	static volatile AtomicBoolean finished = new AtomicBoolean(false);

	public static void main(String[] args) throws Exception {

		Memory memory = new Memory(100);
		Producer p = new Producer(memory);
		Producer pppp = new Producer(memory);
		Consumer c1 = new Consumer(memory);
		Producer ppp = new Producer(memory);
		Consumer c2 = new Consumer(memory);
		Thread t = new Thread(p);
		Thread tt = new Thread(c1);
		Thread ttt = new Thread(ppp);
		Thread tttt = new Thread(pppp);
		Thread ttttt = new Thread(c2);
		double d = System.currentTimeMillis();
		t.start();
		tt.start();
		t.setName("P1");
		tt.setName("C1");
		tttt.setName("P2");
		//tttt.start();
		ttt.setName("P3");
		//ttt.start();
		ttttt.setName("C2");
		ttttt.start();
		t.join();
		tt.join();
		ttt.join();
		tttt.join();
		ttttt.join();
		System.out.println(System.currentTimeMillis() - d);

	}

	static class Producer implements Runnable {
		Memory m;
		static AtomicLong count = new AtomicLong(0);

		public Producer(Memory m) {
			this.m = m;
		}

		@Override
		public void run() {
			while (count.get() != 1000000) {
				try {
					m.put(count.incrementAndGet());
					//System.out.print(count+" "+Thread.currentThread().getName()+" ");
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			System.out.println("All are produced");
		}
	}

	static class Consumer implements Runnable {
		Memory m;
		public static volatile AtomicLong count2 = new AtomicLong(0);

		public Consumer(Memory m) {
			this.m = m;
		}

		@Override
		public void run() {
			while (count2.get() != 1000000) {
				try {

					count2.incrementAndGet();
					Object result = m.get();
					//System.out.print(result+" "+Thread.currentThread().getName()+" ");
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			System.out.println("All are consumed");
		}

	}

	static class Memory {

		public static List data = new ArrayList();
		int capacity;

		public Memory(int capacity) {
			this.capacity = capacity;
		}

		void put(Object o) throws InterruptedException {
			synchronized (data) {
				while (data.size() == capacity) {
					data.wait();
				}
				data.add(o);
				data.notifyAll();
			}
		}

		Object get() throws InterruptedException {
			Object element = null;
			synchronized (data) {
				while (data.size() == 0) {
					data.wait();
				}
				element = data.remove(data.size() - 1);
				data.notifyAll();
			}
			return element;
		}
	}

}